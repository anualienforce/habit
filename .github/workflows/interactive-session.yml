# The name of this workflow, which you'll see in the GitHub Actions tab.
name: Interactive iOS Simulator Session

# This makes the workflow manually triggerable.
# It will NOT run automatically on every push.
on:
  workflow_dispatch:

jobs:
  # The name of our single job.
  start-interactive-session:

    # We must use a macOS runner for Xcode and the iOS Simulator.
    runs-on: macos-latest

    # These are the steps the remote Mac will follow.
    steps:
      # Step 1: Check out your Flutter code from the repository.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up the Flutter environment.
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Step 3: Set up and start the VNC server.
      # This is the core part that enables remote desktop.
      - name: Start VNC Server and Establish Tunnel
        run: |
          # The macOS runner has Screen Sharing (a VNC server) built-in, but it's turned off.
          # This command starts it.
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -restart -agent -privs -all

          # We need to set a password to log in. We'll use a simple one here.
          # IMPORTANT: Anyone who finds your connection URL could try to guess this.
          VNC_PASSWORD='123456'
          echo "VNC Password is: $VNC_PASSWORD"
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -users $(whoami) -access -on -privs -all -setvnclegacy -vnclegacy yes -setvncpw -vncpw "$VNC_PASSWORD"
          
          # Now, we create a tunnel so you can connect from the internet.
          # We use a tool called 'tmate' which is pre-installed on GitHub runners.
          # It creates a secure SSH connection and prints the connection details.
          echo "Starting tmate tunnel..."
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready

          # This command will print the public SSH connection string to the logs.
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
          echo "!!! Your VNC connection details will be in the SSH session. !!!"
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'
          echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

      # Step 4: Keep the job alive.
      # A GitHub Actions job normally ends when the last command finishes.
      # This 'sleep' command keeps it running for almost 6 hours so you have time to connect and test.
      # The job will automatically stop if you cancel it or after the time limit.
      - name: Keep Session Alive
        run: |
          echo "Session is active. Connect using the SSH details from the previous step."
          sleep 21000 # Keeps the job alive for ~5.8 hours